version: 2

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  build_ubuntu16:
    docker:
      - image: sgpearse/vapor3-ubuntu16:latest

    steps:
      - checkout

      - run:
          name: cmake and make
          command: |
            cd /VAPOR
            git pull
            cd build
            cmake ..
            make -j7 &> /tmp/output.txt

      - store_artifacts:
          path: /tmp/output.txt

      - run:
          name: check for warnings
          command: |
            if grep -q warning /tmp/output.txt; then
               exit 1
            else
               exit 0
            fi

  build_ubuntu16_installer:
    docker:
      - image: sgpearse/vapor3-ubuntu16:latest

    steps:
      - checkout

      - run:
          name: make installer
          command: |
            cd /VAPOR/build
            cmake -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON ..
            make -j7
            make installer
            for f in VAPOR3-*.sh ; do mv "$f" "${f/Linux/Ubuntu16-Nightly}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.sh /tmp/workspace/installers

      - persist_to_workspace:
          root: *workspace_root
          paths: 
            - installers

  build_ubuntu18:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - checkout

      - run:
          name: cmake and make
          command: |
            cd /VAPOR
            git pull
            cd build
            cmake ..
            make -j7 &> /tmp/output.txt

      - store_artifacts:
          path: /tmp/output.txt

      - run:
          name: check for warnings
          command: |
            if grep -q warning /tmp/output.txt; then
               exit -1
            else
               exit 0
            fi

  build_ubuntu18_installer:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - checkout

      - run:
          name: make installer
          command: |
            cd /VAPOR/build
            cmake -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON ..
            make -j7
            make installer
            for f in VAPOR3-*.sh ; do mv "$f" "${f/Linux/Ubuntu18-Nightly}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.sh /tmp/workspace/installers

      - persist_to_workspace:
          root: *workspace_root
          paths: 
            - installers

  check_leaks:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - checkout

      - run:
          name: cmake and make
          command: |
            cd /VAPOR
            git pull
            cd build
            cmake -DCMAKE_BUILD_TYPE:String=Release ..
            make
            #valgrind --leak-check=yes bin/vapor > /tmp/output.txt
            valgrind --leak-check=yes bin/vaporpychecker &> /tmp/vaporpychecker.txt
            #valgrind --leak-check=yes bin/vapor &> /tmp/vapor.txt
            #bin/vapor &> /tmp/vapor.txt

      - store_artifacts:
          path: /tmp/*.txt

  build_centos7:
    docker:
      - image: sgpearse/vapor3-centos7:latest

    steps:
      - checkout

      - run:
          name: cmake3 and make
          command: |
            ls -lrth /usr/local/VAPOR-Deps
            cd /VAPOR
            git pull
            cd build
            cmake3 ..
            make -j7 &> /tmp/output.txt

      - store_artifacts:
          path: /tmp/output.txt

      - run:
          name: check for warnings
          command: |
            if grep -q warning /tmp/output.txt; then
               exit 1
            else
               exit 0
            fi

  build_centos7_installer:
    docker:
      - image: sgpearse/vapor3-centos7:latest

    steps:
      - checkout

      - run:
          name: cmake3 and make
          command: |
            ls -lrth /usr/local/VAPOR-Deps
            cd /VAPOR
            git pull
            cd build
            cmake3 -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON ..
            make
            make installer
            for f in VAPOR3-*.sh ; do mv "$f" "${f/Linux/CentOS7-Nightly}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.sh /tmp/workspace/installers


      - persist_to_workspace:
          root: *workspace_root
          paths: 
            - installers

  build_osx:
    macos:
      xcode: "11.1.0"
    steps:
      - run:
          name: Make VAPOR-Deps
          command: |
            sudo mkdir -p /usr/local/VAPOR-Deps
            sudo chmod -R 777 /usr/local/VAPOR-Deps
            sudo chown -R `whoami` /usr/local/VAPOR-Deps
            
      - restore_cache:
          key: osxDeps-v3-{{ .Environment.CIRCLE_PROJECT_REPONAME }}

      - checkout

      - run:
          name: Get dependencies if not cached
          command: |
            export DEPS=/usr/local/VAPOR-Deps/2019-Aug-Darwin.tar.xz
            if [ ! -f $DEPS ]; then
                ~/project/.circleci/getOSXDeps.sh
                #pip3 install gdown
                #sudo mkdir -p /usr/local/VAPOR-Deps
                #sudo chmod 777 /usr/local/VAPOR-Deps
                #cd /usr/local/VAPOR-Deps
                #gdown https://drive.google.com/uc?id=1kyDAzmK9zShrIcoAbned8YW9vn2j7lpe
                #cd /usr/local/VAPOR-Deps
                #tar xf 2019-Aug-Darwin.tar.xz -C /usr/local/VAPOR-Deps
                #ls /usr/local/VAPOR-Deps
            fi

      #- run:
      #    name: Install cmake
      #    command: |
      #      brew install cmake

      - run:
          name: make VAPOR
          command: |
            cp site_files/site.NCAR site.local
            mkdir build
            cd build
            cmake ..
            make -j7 &> /tmp/output.txt

      - save_cache:
          key: osxDeps-v3-{{ .Environment.CIRCLE_PROJECT_REPONAME }}
          paths: 
            - /VAPOR
            - /usr/local/VAPOR-Deps
            - /usr/local/lib/python3.7/site-packages/gdown
            - /usr/local/Cellar/cmake

      - store_artifacts:
          path: /tmp/output.txt

      - run:
          name: check for warnings
          command: |
            if grep -q warning /tmp/output.txt; then
               exit 1
            else
               exit 0
            fi

  build_osx_installer:
    macos:
      xcode: "11.1.0"
    steps:
      - run:
          name: Make VAPOR-Deps
          command: |
            sudo mkdir -p /usr/local/VAPOR-Deps
            sudo chmod -R 777 /usr/local/VAPOR-Deps
            sudo chown -R `whoami` /usr/local/VAPOR-Deps

      - restore_cache:
          key: osxDeps-v3-{{ .Environment.CIRCLE_PROJECT_REPONAME }}

      - run:
          name: Get dependencies if not cached
          command: |
            export DEPS=/usr/local/VAPOR-Deps/2019-Aug-Darwin.tar.xz
            if [ ! -f $DEPS ]; then
                ~/project/.circleci/getOSXDeps.sh
            fi
#      - run:
#          name: Get 3rd party libs
#          command: |
#            pip3 install gdown
#            sudo mkdir -p /usr/local/VAPOR-Deps
#            sudo chmod 777 /usr/local/VAPOR-Deps
#            cd /usr/local/VAPOR-Deps
#            gdown https://drive.google.com/uc?id=1kyDAzmK9zShrIcoAbned8YW9vn2j7lpe
#      - run:
#          name: Extract 3rd party libs
#          command: |
#            cd /usr/local/VAPOR-Deps
#            tar xf 2019-Aug-Darwin.tar.xz -C /usr/local/VAPOR-Deps
#            ls /usr/local/VAPOR-Deps
      - checkout
#      - run:
#          name: Install cmake
#          command: |
#            brew install cmake
      - run:
          name: make VAPOR
          command: |
            cp site_files/site.NCAR site.local
            mkdir build
            cd build
            cmake -DCPACK_BINARY_DRAGNDROP=ON -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON ..
            make
            make installer
            for f in VAPOR3-*.dmg ; do mv "$f" "${f/Darwin/Darwin-Nightly}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.dmg /tmp/workspace/installers


      - persist_to_workspace:
          root: *workspace_root
          paths: 
            - installers

  clang_tidy_ubuntu18:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest
    steps:
      - checkout
      - run:
          name: CMake
          command: |
            cd /VAPOR/build
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=true ..
            clang-tidy -checks=cppcoreguidelines* -header-filter=.* -p ./ /VAPOR/apps/vaporgui/MainForm.cpp &> /tmp/tidy.txt

      - store_artifacts:
            path: /tmp/tidy.txt

  clang_tidy_osx:
    macos:
      xcode: "11.1.0"
    steps:
      - checkout
      - run:
          name: check MainForm.cpp
          command: |
            sudo mkdir build
            cd build
      - run:
          name: CMake
          command: |
            brew install cmake
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=true ..
      - run:
          name: tidy
          command: |
            /usr/local/opt/llvm/bin/clang-tidy -checks=* -header-filter=.* -p ./ /VAPOR/apps/vaporgui/MainForm.cpp &> /tmp/tidy.txt

      - store_artifacts:
            path: /tmp/tidy.txt

  build_win10:
    docker:
      - image: sgpearse/vapor3-win10:latest
    steps:
      - checkout
      - run:
          name: build installer
          command: |
            msbuild C:\VAPOR\build\PACKAGE.vcxproj /p:Configuration=Release /p:Platform=x64

  release_on_github:
    macos:
      xcode: "11.1.0"
    steps:
      - *attach_workspace
      - run:
          name: list workspace
          command: ls /tmp/workspace
      - run:
          name: install ghr
          command: |
            brew install ghr
      - run:
          name: push assets with ghr
          command: |
            ghr -b "These installers are built every night with Vapor's current code base.  Caution: These installers are not necessarily stable, and have not been thuroughly tested.  If this is a problem our official releases can be found below." -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -prerelease -c ${CIRCLE_SHA1} -delete Nightly /tmp/workspace/installers



workflows:
  version: 2
  build:
    jobs:
      #- build_ubuntu18
      #- build_ubuntu16
      #- build_centos7
      #- build_osx
      #- build_win10
      - build_osx_installer
      #- clang_tidy_ubuntu18

#  leak_check:
#    triggers:
#      - schedule:
#           cron: "0 7 1 * *" #monthly cron job @ midnight MST, on the 1st
#           filters:
#             branches:
#               only:
#                 - nightly
#    jobs:
#      - check_leaks

  nightly:
    triggers:
      - schedule:
           cron: "0 7 * * 5" #weekly cron job on Friday @ midnight MST
           filters:
             branches:
               only:
                 - nightly
                 #- master
    jobs:
      - build_ubuntu18_installer
      - build_ubuntu16_installer
      - build_centos7_installer
      - build_osx_installer
      - release_on_github:
          requires:
            - build_ubuntu16_installer
            - build_ubuntu18_installer
            - build_centos7_installer
            - build_osx_installer
